#include <iostream>
using namespace std;
// 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。
// 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。

class Person
{
  public:
    // 1.构造函数语法：类名（）{}
    // 1.构造函数，没有返回值也不写void
    // 2.函数名称与类名相同
    // 3.构造函数可以有参数，因此可以发生重载
    // 4.程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次
    Person()
    {
        cout << "Person构造函数的调用" << endl;//如果不自定义则相当于此行被注释(函数内容为空)
    }


    // 2.析构函数语法：类名（）{}
    // 1.析构函数，没有返回值也不写void
    // 2.函数名称与类名相同，在名称前加上符号～
    // 3.析构函数不可以有参数，因此不可以发生重载
    // 4.程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次
    ~Person()
    {
        cout << "Person析构函数的调用" << endl; // 如果不自定义则相当于此行被注释(函数内容为空)
    }
};

//构造和析构都是必须有的实现，如果自己不提供，编译器则会提供一个空实现的构造和析构
void test01()
{
    Person p1;//在栈上的数据，test01执行完毕后释放这个对象
}

int main()
{
    //test01(); // 即使test01()中没有调用函数Person(),编译器也会自动调用(程序在调用对象的时候回自动调用构造)

    Person p2;
    //若在return之前添加断点，则只会调用构造函数，因为main未结束，对象还未被释放，不调用析构函数
    return 0;
}